from math import sqrt
from globs import *

"""
   The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
   would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?

"""


def check_num_for_divisors(seed, tri_num: int):
    divisors = 0
    for n in range(int(sqrt(tri_num)), 0, -1):
        if not tri_num % n:
            result = tri_num / n
            divisors += 1
            if result != n:
                divisors += 1

    return False if divisors > 500 else True


def calc_tri_num():
    not_found = True
    v = 7
    answer = None
    while not_found:
        answer = int(v * (v + 1) / 2)
        not_found = check_num_for_divisors(v, answer)
        v += 1

    return answer


if __name__ == '__main__':
    print(f"Answer: {calc_tri_num()}")
