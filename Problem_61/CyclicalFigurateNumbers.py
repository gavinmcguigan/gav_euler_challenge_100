from globs import *

"""
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers 
    n and are generated by the following formulae:

    Triangle	 	P3,n =n(n+1)/2	 	1, 3, 6, 10, 15, ...
    Square	 	    P4,n =n2	 	        1, 4, 9, 16, 25, ...
    Pentagonal	 	P5,n =n(3n−1)/2	 	1, 5, 12, 22, 35, ...
    Hexagonal	 	P6,n =n(2n−1)	 	1, 6, 15, 28, 45, ...
    Heptagonal	 	P7,n =n(5n−3)/2	 	1, 7, 18, 34, 55, ...
    Octagonal	 	P8,n =n(3n−2)	 	1, 8, 21, 40, 65, ...
    
    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
    
    The set is cyclic, in that the last two digits of each number is the first two digits of the next number 
    (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented 
    by a different number in the set.
    This is the only set of 4-digit numbers with this property.
    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, 
    square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""


def get_lists():
    t = [int(n**2/2 + n/2) for n in range(45, 141)]
    s = [n**2 for n in range(32, 100)]
    p = [int(3*n**2/2 - n/2) for n in range(26, 82)]
    hx = [int(2*n**2 - n) for n in range(23, 71)]
    hp = [int(5*n**2/2 - 3*n/2) for n in range(21, 64)]
    o = [int(3*n**2 - 2*n) for n in range(19, 59)]

    return list(permutations([(o, '8 '), (hp, '7 '), (p, '5 '), (s, '4 '), (hx, '6 '), (t, '3 ')], 6))


def one_to_rule_them_all(z: list, y: list):
    new_list = []
    for zz in z:
        for yy in y:
            if str(zz[-1])[-2:] == str(yy)[:2]:
                new_list.append(zz + [yy])
    return new_list


def check_wrap_around(i: list, j: int, f: str):
    for each in i:
        if str(each[0])[:2] == str(each[-1])[-2:]:
            EULER_LOGGER.debug(f"Pattern: {f}   {j}")
            EULER_LOGGER.debug(f"Passed : {each}  -->  {sum(each)}\n")
            return sum(each)    # If we don't return here, you'll get the same answer 6 times.
    return False


def main():
    z_list, a = [], None
    for j, each in enumerate(get_lists()):
        funcs = ''
        for n, (i, f) in enumerate(each):
            funcs += f
            if n == 0:
                z_list = [[a] for a in i]
            else:
                if z_list:
                    z_list = one_to_rule_them_all(z_list, i)
        a = check_wrap_around(z_list, j, funcs)
        if a:
            break
    return a


if __name__ == '__main__':
    answer = main()
    show_answer(answer)
