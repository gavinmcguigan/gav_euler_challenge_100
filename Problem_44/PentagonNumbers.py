from globs import *

"""
    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    
    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
    
    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal 
    and D = |Pk − Pj| is minimised; what is the value of D?
"""


def check_if_pentagon_num(n):
    sq = sqrt(1+24*n)
    return True if not (1 + sq) % 6 else False


def gen_pen_numbers(start=0, stop=10):
    n = start
    while True:
        n += 1
        pen_num = n*(3*n-1)/2
        yield n, int(pen_num)
        if n > stop:
            break


def generate_pairs():
    for (m, i) in gen_pen_numbers(start=0, stop=2500):
        for (n, j) in gen_pen_numbers(start=0, stop=2500):
            yield i, j


def main():
    d = None
    gpn = generate_pairs()
    for j, k in gpn:
        if check_if_pentagon_num(j + k) and check_if_pentagon_num(abs(k - j)):
            EULER_LOGGER.debug(f"j={j}   k={k}   |j - k| => {abs(j - k)}")
            d = abs(j - k)
            break
    return d


if __name__ == '__main__':
    answer = main()
    show_answer(answer)
